import asyncHandler from"../utils/asyncHandler.js";import apiError from"./../utils/apiError.s";import{User}from"./../models/user.models";import uploadOnCloudinary from"../utils/cloudinary.js";import apiResponse from"../utils/apiResponse.js";const registerUser=asyncHandler((async(req,res)=>{const{fullname:fullname,email:email,password:password,username:username}=req.body;if([username,fullname,email,password].some((fields=>""===fields?.trim())))throw new apiError(404,"All fields are required");if(User.findOne({$or:[{username:username},{email:email}]}))throw new apiError(404,"User already exists");const avatarLocalPath=req.files?.avatar[0]?.path,coverimageLocalPath=req.files?.coverimage[0]?.path;if(!avatarLocalPath)throw new apiError(404,"Avatar not found");const avatar=await uploadOnCloudinary(avatarLocalPath),coverimage=await uploadOnCloudinary(coverimageLocalPath);if(!avatar)throw new apiError(404,"Avatar not found");const user=await User.create({fullname:fullname,email:email,password:password,username:username.toLowerCase(),avatar:avatar.url,coverimage:coverimage?.url||""}),createdUser=await User.findById(user._id).select("-password -refreshToken");if(!createdUser)throw new apiError(500,"Something went wrong while creating user");return res.status(201).json(new apiResponse(200,createdUser,"User created successfully"))}));export default registerUser;